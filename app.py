import streamlit as st
import pandas as pd
from docx import Document
from docxcompose.composer import Composer
import io
import re

def load_excel_file(uploaded_file):
    try:
        return pd.read_excel(uploaded_file)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file Excel: {str(e)}")
        return None

def replace_placeholders_in_paragraph(paragraph, data_dict):
    full_text = paragraph.text
    has_placeholder = any(f"{{{{{key}}}}}" in full_text for key in data_dict)
    if has_placeholder:
        new_text = full_text
        for key, value in data_dict.items():
            new_text = new_text.replace(f"{{{{{key}}}}}", str(value))
        for run in paragraph.runs:
            run.clear()
        if paragraph.runs:
            paragraph.runs[0].text = new_text
        else:
            paragraph.add_run(new_text)

def replace_placeholders_in_table(table, data_dict):
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                replace_placeholders_in_paragraph(paragraph, data_dict)
            cell_text = cell.text
            has_placeholder = any(f"{{{{{key}}}}}" in cell_text for key in data_dict)
            if has_placeholder:
                new_text = cell_text
                for key, value in data_dict.items():
                    new_text = new_text.replace(f"{{{{{key}}}}}", str(value))
                cell.text = ""
                cell.paragraphs[0].add_run(new_text)

def process_word_template(template_bytes, data_dict):
    try:
        doc = Document(io.BytesIO(template_bytes))
        for paragraph in doc.paragraphs:
            replace_placeholders_in_paragraph(paragraph, data_dict)
        for table in doc.tables:
            replace_placeholders_in_table(table, data_dict)
        return doc
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω Word template: {str(e)}")
        return None

def find_placeholders_in_doc(template_bytes):
    doc = Document(io.BytesIO(template_bytes))
    placeholders = set()
    for paragraph in doc.paragraphs:
        placeholders.update(re.findall(r'\{\{([^}]+)\}\}', paragraph.text))
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    placeholders.update(re.findall(r'\{\{([^}]+)\}\}', paragraph.text))
    return placeholders

def merge_word_documents(documents):
    if not documents:
        return None
    merged_doc = documents[0]
    composer = Composer(merged_doc)
    for doc in documents[1:]:
        composer.append(doc)
    output = io.BytesIO()
    composer.save(output)
    output.seek(0)
    return output

def main():
    st.set_page_config(page_title="Excel to Word Template", page_icon="üìÑ", layout="wide")
    st.title("üìÑ Excel to Word Template Generator")
    st.markdown("---")

    with st.sidebar:
        st.header("üìÅ Upload Files")
        excel_file = st.file_uploader("Ch·ªçn file Excel (.xlsx, .xls)", type=['xlsx', 'xls'])
        word_file = st.file_uploader("Ch·ªçn file Word template (.docx)", type=['docx'])

    col1, col2 = st.columns([1, 1])

    if excel_file:
        excel_data = load_excel_file(excel_file)
    else:
        excel_data = None

    with col1:
        st.header("üìä D·ªØ li·ªáu Excel")
        if excel_data is not None:
            st.success(f"‚úÖ ƒê√£ load {len(excel_data)} d√≤ng d·ªØ li·ªáu")
            st.subheader("Xem tr∆∞·ªõc d·ªØ li·ªáu:")
            st.dataframe(excel_data.head(10), use_container_width=True)

            st.subheader("Ch·ªçn c·ªôt ƒë·ªÉ s·ª≠ d·ª•ng:")
            selected_columns = st.multiselect(
                "C√°c c·ªôt ƒë∆∞·ª£c ch·ªçn s·∫Ω l√†m placeholder trong template",
                options=excel_data.columns.tolist(),
                default=excel_data.columns.tolist()
            )

            if selected_columns:
                st.info(f"üìã Placeholder format: {', '.join([f'{{{{{col}}}}}' for col in selected_columns[:3]])}...")
                st.subheader("üîç Preview data mapping:")
                first_row = excel_data.iloc[0]
                for col in selected_columns:
                    value = first_row[col] if pd.notna(first_row[col]) else ""
                    st.write(f"- `{{{{{col}}}}}` ‚Üí `{value}`")
        else:
            st.info("üëÜ Vui l√≤ng upload file Excel")

    with col2:
        st.header("üìù Word Template")
        if word_file:
            template_bytes = word_file.getvalue()
            st.success("‚úÖ ƒê√£ upload template Word")

            placeholders = find_placeholders_in_doc(template_bytes)

            if placeholders:
                st.subheader("Placeholder ƒë∆∞·ª£c t√¨m th·∫•y:")
                for placeholder in sorted(placeholders):
                    st.code(f"{{{{{placeholder}}}}}")
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y placeholder n√†o trong template")
        else:
            template_bytes = None
            st.info("üëÜ Vui l√≤ng upload file Word template")

    st.markdown("---")
    st.header("üöÄ X·ª≠ l√Ω v√† T·∫°o File Word G·ªôp")

    if excel_data is not None and template_bytes is not None:
        if selected_columns:
            placeholders = find_placeholders_in_doc(template_bytes)
            missing = placeholders - set(selected_columns)
            if missing:
                st.warning(f"‚ö†Ô∏è C√°c placeholder kh√¥ng c√≥ trong d·ªØ li·ªáu Excel: {', '.join(sorted(missing))}")

            if st.button("üìò T·∫°o File Word G·ªôp", type="primary", use_container_width=True):
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    documents = []
                    for _, row in excel_data.iterrows():
                        data_dict = {col: row[col] if pd.notna(row[col]) else "" for col in selected_columns}
                        doc = process_word_template(template_bytes, data_dict)
                        if doc:
                            documents.append(doc)

                    if documents:
                        merged_output = merge_word_documents(documents)
                        st.success("‚úÖ ƒê√£ t·∫°o file Word g·ªôp th√†nh c√¥ng!")
                        st.download_button(
                            label="üì• T·∫£i xu·ªëng file Word g·ªôp",
                            data=merged_output.getvalue(),
                            file_name="word_merged_output.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                    else:
                        st.error("Kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c t·∫°o.")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c·ªôt t·ª´ d·ªØ li·ªáu Excel")
    else:
        st.info("‚ÑπÔ∏è Vui l√≤ng upload ƒë·∫ßy ƒë·ªß file Excel v√† Word template ƒë·ªÉ b·∫Øt ƒë·∫ßu")

    with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
        st.markdown("""
        ### C√°ch s·ª≠ d·ª•ng:

        1. **Upload file Excel**: File ch·ª©a d·ªØ li·ªáu c·∫ßn ƒëi·ªÅn v√†o template
        2. **Upload file Word**: Template v·ªõi c√°c placeholder
        3. **Ch·ªçn c·ªôt**: Ch·ªçn c√°c c·ªôt t·ª´ Excel ƒë·ªÉ s·ª≠ d·ª•ng l√†m `{{placeholder}}`
        4. **T·∫°o file Word g·ªôp**: Nh·∫•n n√∫t ƒë·ªÉ t·∫°o m·ªôt file Word duy nh·∫•t

        ### Format Placeholder:
        - S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng `{{t√™n_c·ªôt}}` trong Word
        - V√≠ d·ª•: `{{name}}`, `{{age}}`, `{{address}}`

        ### L∆∞u √Ω:
        - M·ªói d√≤ng trong Excel s·∫Ω t·∫°o th√†nh m·ªôt trang trong file Word g·ªôp
        - Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng file Word g·ªëc
        - Ki·ªÉm tra placeholder kh√¥ng kh·ªõp ƒë·ªÉ c·∫£nh b√°o
        """)

if __name__ == "__main__":
    main()
